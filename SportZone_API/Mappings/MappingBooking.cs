using AutoMapper;
using SportZone_API.DTOs;
using SportZone_API.Models;

namespace SportZone_API.Mappings
{
    public class MappingBooking : Profile
    {
        public MappingBooking()
        {
            // Booking Mappings
            CreateMap<BookingCreateDTO, Booking>()
                .ForMember(dest => dest.BookingId, opt => opt.Ignore()) // Auto-generated by DB
                .ForMember(dest => dest.Status, opt => opt.Ignore()) // Set in service
                .ForMember(dest => dest.StatusPayment, opt => opt.Ignore()) // Set in service
                .ForMember(dest => dest.CreateAt, opt => opt.Ignore()) // Set in service
                .ForMember(dest => dest.UIdNavigation, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.Field, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.FieldBookingSchedules, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.Orders, opt => opt.Ignore()); // Navigation property

            CreateMap<Booking, BookingResponseDTO>()
                .ForMember(dest => dest.FieldName, opt => opt.MapFrom(src => src.Field != null ? src.Field.FieldName : null))
                .ForMember(dest => dest.FacilityName, opt => opt.MapFrom(src => src.Field != null && src.Field.Fac != null ? $"Cơ sở {src.Field.FacId}" : null))
                .ForMember(dest => dest.FacilityAddress, opt => opt.MapFrom(src => src.Field != null && src.Field.Fac != null ? src.Field.Fac.Address : null))
                .ForMember(dest => dest.CustomerName, opt => opt.MapFrom(src => src.UIdNavigation != null && src.UIdNavigation.Customer != null ? src.UIdNavigation.Customer.Name : null))
                .ForMember(dest => dest.FieldPrice, opt => opt.Ignore()) // Will be calculated from FieldPricing in repository
                .ForMember(dest => dest.TotalAmount, opt => opt.MapFrom(src => src.Orders != null && src.Orders.Any() ? src.Orders.First().TotalPrice : null))
                .ForMember(dest => dest.Services, opt => opt.Ignore()) // Complex mapping - handled in repository
                .ForMember(dest => dest.Notes, opt => opt.MapFrom(src => src.FieldBookingSchedules != null && src.FieldBookingSchedules.Any() ? src.FieldBookingSchedules.First().Notes : null));
        }
    }
}
